
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author hantr
 */
public class ThongKeMuonTra extends javax.swing.JFrame {

    /**
     * Creates new form ThongKeMuonTra
     */
    KetNoiQLTV ketNoiQLTV = null;
    Connection connection = null;
    ArrayList<ThongKeMuonTraTye1> listMuonTraTheoNhanVien ; 
    

    public ThongKeMuonTra() throws ClassNotFoundException, SQLException {
        ketNoiQLTV = new KetNoiQLTV();
        connection = ketNoiQLTV.getJDBCConnection();
        initComponents();
        this.setLocationRelativeTo(null);
        listMuonTraTheoNhanVien= ThongKeMuonTraTye1.getList();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nhanvienchon = new javax.swing.JRadioButton();
        docgiachon = new javax.swing.JRadioButton();
        ngaymuonchon = new javax.swing.JRadioButton();
        nammuonchon = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bangthongke = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        namhien = new javax.swing.JTextField();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HÀN TRUNG KIÊN 20162220");

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("THỐNG KÊ HÓA ĐƠN MƯỢN TRẢ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonGroup1.add(nhanvienchon);
        nhanvienchon.setText("Nhân viên");
        nhanvienchon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nhanvienchonActionPerformed(evt);
            }
        });

        buttonGroup1.add(docgiachon);
        docgiachon.setText("Độc giả");
        docgiachon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docgiachonActionPerformed(evt);
            }
        });

        buttonGroup1.add(ngaymuonchon);
        ngaymuonchon.setText("Ngày mượn ");
        ngaymuonchon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngaymuonchonActionPerformed(evt);
            }
        });

        buttonGroup1.add(nammuonchon);
        nammuonchon.setText("Năm: ");
        nammuonchon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nammuonchonActionPerformed(evt);
            }
        });

        bangthongke.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(bangthongke);

        jButton2.setBackground(new java.awt.Color(102, 102, 102));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrow-back-icon.png"))); // NOI18N
        jButton2.setText("Quay lại ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(102, 102, 102));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Word-icon.png"))); // NOI18N
        jButton3.setText("Xuất file");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(102, 102, 102));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logout3.png"))); // NOI18N
        jButton4.setText("Đăng xuất ");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(102, 102, 102));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xem chi tiet.png"))); // NOI18N
        jButton5.setText("Xem chi tiết");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton2)
                .addGap(171, 171, 171)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addComponent(jButton4))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(nhanvienchon)
                        .addGap(41, 41, 41)
                        .addComponent(docgiachon)
                        .addGap(38, 38, 38)
                        .addComponent(ngaymuonchon)
                        .addGap(28, 28, 28)
                        .addComponent(nammuonchon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(namhien)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nhanvienchon)
                    .addComponent(docgiachon)
                    .addComponent(ngaymuonchon)
                    .addComponent(nammuonchon)
                    .addComponent(jButton5)
                    .addComponent(namhien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            new MuonTra().setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ThongKeMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ThongKeMuonTra.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int chose = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn đăng xuất không?", "Xác nhận", 0);
        if (chose == 0) {

            new Menu().setVisible(true);
            this.dispose();

        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void nhanvienchonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nhanvienchonActionPerformed
        thongKeTheoNhanVien();    }//GEN-LAST:event_nhanvienchonActionPerformed

    private void docgiachonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docgiachonActionPerformed
        thongKeTheoDocGia();    }//GEN-LAST:event_docgiachonActionPerformed

    private void ngaymuonchonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngaymuonchonActionPerformed
        thongKeTheoNgayMuon();        // TODO add your handling code here:
    }//GEN-LAST:event_ngaymuonchonActionPerformed

    private void nammuonchonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nammuonchonActionPerformed
        thongKeTheoNam();        // TODO add your handling code here:
    }//GEN-LAST:event_nammuonchonActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        new ChiTietNam().setVisible(true);
        this.dispose();


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(nhanvienchon.isSelected()){
             JFileChooser jFileChooser = new JFileChooser();
            if (jFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = jFileChooser.getSelectedFile();

                try {
                    WordHelper.writeMuonTraTheoNhanVien(file, listMuonTraTheoNhanVien , "THỐNG KÊ MƯỢN TRẢ THEO NHÂN VIÊN");
                    JOptionPane.showMessageDialog(null, "Xuất file thành công");

                } catch (IOException ex) {
                    Logger.getLogger(ThongKeMuonTra.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Xuất file thất bại!");
                }

            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThongKeMuonTra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThongKeMuonTra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThongKeMuonTra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThongKeMuonTra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ThongKeMuonTra().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ThongKeMuonTra.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ThongKeMuonTra.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bangthongke;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton docgiachon;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextField namhien;
    private javax.swing.JRadioButton nammuonchon;
    private javax.swing.JRadioButton ngaymuonchon;
    private javax.swing.JRadioButton nhanvienchon;
    // End of variables declaration//GEN-END:variables

    private void thongKeTheoNhanVien() {
        bangthongke.removeAll();
        String[] columns = {"Mã nhân viên", "Tên nhân viên", "Số lượng hóa đơn", "Tổng tiền nhận cọc", "Tổng tiền nhận phạt"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        String sql = "SELECT COUNT(idNhanVien), idNhanVien FROM muon_tra GROUP BY idNhanVien;";
        Statement statement = null;
        ResultSet resultSet = null;
        ResultSet resultSet1 = null;

        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getInt("idNhanVien"));

                vector.add(getTenNhanVien(resultSet.getInt("idNhanVien")));
                vector.add(resultSet.getInt("COUNT(idNhanVien)"));
                vector.add(getTongTienCocNV(resultSet.getInt("idNhanVien")));
                vector.add(getTongTienPhatNV(resultSet.getInt("idNhanVien")));

                model.addRow(vector);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        bangthongke.setModel(model);

    }

    private void thongKeTheoNgayMuon() {
        bangthongke.removeAll();
        String[] columns = {"Ngày mượn", "Số lượng hóa đơn", "Tổng tiền cọc", "Tổng tiền phạt"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        String sql = "SELECT COUNT(idMuonTra), ngayMuon FROM muon_tra GROUP BY ngayMuon ORDER BY ngayMuon DESC;";
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getString("ngayMuon"));
                vector.add(resultSet.getInt("COUNT(idMuonTra)"));
                vector.add(getTongTienCocTheoNgayMuon(resultSet.getDate("ngayMuon")));
                vector.add(getTongTienPhatTheoNgay(resultSet.getDate("ngayMuon")));

                model.addRow(vector);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        bangthongke.setModel(model);

    }

    private double getTongTienPhatTheoNgay(Date ngayMuon) {
        double tongTienPhat = 0D;
        String sql = "SELECT  sum(tienPhat)  FROM quan_ly_thu_vien.muon_tra inner join chitietmuontra on muon_tra.idMuonTra= chitietmuontra.idMuonTra  where ngayMuon='" + ngayMuon + "';";
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                tongTienPhat = resultSet.getDouble("sum(tienPhat)");

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tongTienPhat;

    }

    public String getTenNhanVien(int idNhanVien) {

        String tenNhanVien = "";
        Statement statement = null;
        ResultSet resultSet = null;
        String sql = "select tenNhanVien from nhanvien where idNhanVien =' " + idNhanVien + "'; ";
        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                tenNhanVien = resultSet.getString("tenNhanVien");

            }
        } catch (Exception e) {
            e.printStackTrace();

        }

        return tenNhanVien;
    }

    public Double getTongTienCocNV(int idNhanVien) {

        Double tongTienCoc = 0D;
        Statement statement = null;
        ResultSet resultSet = null;
        String sql = "select sum(tienCoc) from muon_tra where idNhanVien =' " + idNhanVien + "'; ";
        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                tongTienCoc = resultSet.getDouble("sum(tienCoc)");

            }
        } catch (Exception e) {
            e.printStackTrace();

        }

        return tongTienCoc;
    }

    public Double getTongTienPhatNV(int idNhanVien) {

        Double tongTienCoc = 0D;
        Statement statement = null;
        ResultSet resultSet = null;
        String sql = "SELECT  muon_tra.idNhanVien ,  sum(tienPhat)   FROM muon_tra INNER JOIN chitietmuontra ON muon_tra.idMuonTra=chitietmuontra.idMuonTra where idNhanVien=" + idNhanVien + " ;";
        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                tongTienCoc = resultSet.getDouble("sum(tienPhat)");

            }
        } catch (Exception e) {
            e.printStackTrace();

        }

        return tongTienCoc;
    }

    public Double getTongTienPhatDG(int idDocGia) {

        Double tongTienPhat = 0D;
        Statement statement = null;
        ResultSet resultSet = null;
        String sql = "SELECT    sum(tienPhat)   FROM muon_tra INNER JOIN chitietmuontra ON muon_tra.idMuonTra=chitietmuontra.idMuonTra where idDocGia=" + idDocGia + " ;";
        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                tongTienPhat = resultSet.getDouble("sum(tienPhat)");

            }
        } catch (Exception e) {
            e.printStackTrace();

        }

        return tongTienPhat;
    }

    private void thongKeTheoDocGia() {
        bangthongke.removeAll();
        String[] columns = {"Mã độc giả", "Tên độc giả", "Số lượng hóa đơn", "Tổng tiền đặt cọc", "Tổng tiền nộp phạt"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        String sql = "SELECT COUNT(idDocGia), idDocGia FROM muon_tra GROUP BY idDocGia;";
        Statement statement = null;
        ResultSet resultSet = null;
        ResultSet resultSet1 = null;

        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getInt("idDocGia"));

                vector.add(getTenDocGia(resultSet.getInt("idDocGia")));
                vector.add(resultSet.getInt("COUNT(idDocGia)"));
                vector.add(getTongTienCocDG(resultSet.getInt("idDocGia")));
                vector.add(getTongTienPhatDG(resultSet.getInt("idDocGia")));

                model.addRow(vector);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        bangthongke.setModel(model);

    }

    public  void thongKeTheoNam() {
        bangthongke.removeAll();
        String[] columns = {"Năm", "Số lượng hóa đơn", "Tổng tiền cọc ", "Tổng tiền phạt"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        String sql = "SELECT count(idMuonTra),YEAR(ngayMuon),sum(tienCoc)  FROM muon_tra   group by  YEAR(ngayMuon); ";
        Statement statement = null;
        ResultSet resultSet = null;
        ResultSet resultSet1 = null;

        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getString("YEAR(ngayMuon)"));
                vector.add(resultSet.getInt("count(idMuonTra)"));
                vector.add(resultSet.getDouble("sum(tienCoc)"));
                vector.add(getTienPhatTheoNam(resultSet.getString("YEAR(ngayMuon)")));

                model.addRow(vector);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        bangthongke.setModel(model);

        bangthongke.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {

                if (bangthongke.getSelectedRow() >= 0) {
                    namhien.setText(bangthongke.getValueAt(bangthongke.getSelectedRow(), 0).toString());

                }

            }

        });

    }

    public String getTenDocGia(int idDocGia) {

        String tenDocGia = "";
        Statement statement = null;
        ResultSet resultSet = null;
        String sql = "select tenDocGia from docgia where idDocGia =' " + idDocGia + "'; ";
        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                tenDocGia = resultSet.getString("tenDocGia");

            }
        } catch (Exception e) {
            e.printStackTrace();

        }

        return tenDocGia;
    }

    private void thongKeTheoThang() {

        bangthongke.removeAll();
        String[] columns = {"Tháng", "Số lượng hóa đơn"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        String sql = "SELECT count(idMuonTra), ngayMuon FROM muon_tra GROUP BY ngayMuon ORDER BY ngayMuon DESC;";
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getString("ngayMuon"));
                vector.add(resultSet.getInt("count(idMuonTra)"));

                model.addRow(vector);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        bangthongke.setModel(model);
    }

    private Double getTongTienCocDG(int idDocGia) {
        Double tongTienCoc = 0D;
        Statement statement = null;
        ResultSet resultSet = null;
        String sql = "select sum(tienCoc) from muon_tra where idDocGia =' " + idDocGia + "'; ";
        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                tongTienCoc = resultSet.getDouble("sum(tienCoc)");

            }
        } catch (Exception e) {
            e.printStackTrace();

        }

        return tongTienCoc;
    }

    private Double getTongTienCocTheoNgayMuon(Date ngayMuon) {
        Double tongTienCoc = 0D;
        Statement statement = null;
        ResultSet resultSet = null;
        String sql = "select sum(tienCoc) from muon_tra where ngayMuon =' " + ngayMuon + "'; ";
        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                tongTienCoc = resultSet.getDouble("sum(tienCoc)");

            }
        } catch (Exception e) {
            e.printStackTrace();

        }

        return tongTienCoc;
    }

    public static String docNam() {

        String nam = "";
        nam = namhien.getText();

        return nam;
    }
    public  double getTienPhatTheoNam(String a){
        Double tienPhat =0D; 
        
        Statement statement = null;
        ResultSet resultSet = null;
        String sql = "SELECT  sum(tienPhat) FROM muon_tra inner join chitietmuontra on muon_tra.idMuonTra = chitietmuontra.idMuonTra where year(ngayMuon)='"+a+"';";
        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                tienPhat = resultSet.getDouble("sum(tienPhat)");

            }
        } catch (Exception e) {
            e.printStackTrace();

        }
        
        return tienPhat; 
    }

}
